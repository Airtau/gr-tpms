#!/usr/bin/env python

# Copyright 2014 Jared Boone <jared@sharebrained.com>
#
# This file is part of gr-tpms.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.
#

import time

from math import floor, ceil, sqrt

from argparse import ArgumentParser

from gnuradio import analog
from gnuradio import blocks
from gnuradio import digital
from gnuradio import gr
from gnuradio import filter
from gnuradio.filter import firdes
import pmt

import tpms

from tpms.packet_check import packet_decode

if_sampling_rate = 400000
target_frequency = 315000000

class packet_sink(gr.basic_block):
	def __init__(self, output_raw=False):
		super(packet_sink, self).__init__(
			"packet_handler",
			in_sig=None,
			out_sig=None,
		)
		self.output_raw = output_raw

		port = pmt.intern("packet_sink")
		self.message_port_register_in(port)

		self.set_msg_handler(port, self._handle)

	def _handle(self, message):
		d = pmt.to_python(message)
		data_ref = pmt.dict_ref(message, pmt.intern("data"), pmt.PMT_NIL)
		data = pmt.u8vector_elements(data_ref)
		data_s = ''.join([str(c) for c in data])
		d['data'] = data_s
		packet_decode(d, output_raw=self.output_raw)

class source_hackrf(gr.hier_block2):
	def __init__(self):
		super(source_hackrf, self).__init__(
			"source_hackrf",
			gr.io_signature(0, 0, 0),
			gr.io_signature(1, 1, gr.sizeof_gr_complex*1),
		)

		import osmosdr

		rf_sampling_rate = 10000000
		baseband_bandwidth = 1750000
		offset_frequency = 400000		# Keep well below roll-off of baseband filter.
		rf_gain = 14			# Gains set assuming a front-end filter keeps out-of-band noise down.
		if_gain = 40
		bb_gain = 24
		if_filter_attenuation = 60

		rf_decimation, rf_decimation_remainder = divmod(rf_sampling_rate, if_sampling_rate)
		if rf_decimation_remainder != 0:
			raise RuntimeError('RF decimation must be an integer')
		tuning_frequency = target_frequency - offset_frequency

		self.source = osmosdr.source(args="numchan=1 hackrf=0")
		self.source.set_sample_rate(rf_sampling_rate)
		self.source.set_center_freq(tuning_frequency, 0)
		self.source.set_freq_corr(0, 0)
		self.source.set_dc_offset_mode(0, 0)
		self.source.set_iq_balance_mode(0, 0)
		self.source.set_gain_mode(0, 0)
		self.source.set_gain(rf_gain, 0)
		self.source.set_if_gain(if_gain, 0)
		self.source.set_bb_gain(bb_gain, 0)
		self.source.set_antenna("", 0)
		self.source.set_bandwidth(baseband_bandwidth, 0)

		if_taps = firdes.low_pass_2(1.0, rf_sampling_rate, if_sampling_rate*0.45, if_sampling_rate*0.1, if_filter_attenuation)
		self.if_filter = filter.freq_xlating_fir_filter_ccc(rf_decimation, (if_taps), offset_frequency, rf_sampling_rate)
		#self.if_filter.set_min_output_buffer(1048576)

		self.connect(self.source, self.if_filter, self)

class source_rtlsdr(gr.hier_block2):
	def __init__(self):
		super(source_rtlsdr, self).__init__(
			"source_rtlsdr",
			gr.io_signature(0, 0, 0),
			gr.io_signature(1, 1, gr.sizeof_gr_complex*1),
		)

		import osmosdr

		rf_sampling_rate = 2400000
		offset_frequency = rf_sampling_rate / 4
		rf_gain = 42			# Gains set assuming a front-end filter keeps out-of-band noise down.
		if_gain = 42
		bb_gain = 20			# Not sure this has an effect on RTL-SDR.
		baseband_bandwidth = 0	# No effect on RTL-SDR?
		if_filter_attenuation = 60

		rf_decimation, rf_decimation_remainder = divmod(rf_sampling_rate, if_sampling_rate)
		if rf_decimation_remainder != 0:
			raise RuntimeError('RF decimation must be an integer')
		tuning_frequency = target_frequency - offset_frequency

		self.source = osmosdr.source(args="numchan=1 rtl=0")
		self.source.set_sample_rate(rf_sampling_rate)
		self.source.set_center_freq(tuning_frequency, 0)
		self.source.set_freq_corr(0, 0)
		self.source.set_dc_offset_mode(0, 0)
		self.source.set_iq_balance_mode(0, 0)
		self.source.set_gain_mode(0, 0)
		self.source.set_gain(rf_gain, 0)
		self.source.set_if_gain(if_gain, 0)
		self.source.set_bb_gain(bb_gain, 0)
		self.source.set_antenna("", 0)
		self.source.set_bandwidth(baseband_bandwidth, 0)

		if_taps = firdes.low_pass_2(1.0, rf_sampling_rate, if_sampling_rate*0.45, if_sampling_rate*0.1, if_filter_attenuation)
		self.if_filter = filter.freq_xlating_fir_filter_ccc(rf_decimation, (if_taps), offset_frequency, rf_sampling_rate)
		#self.if_filter.set_min_output_buffer(1048576)

		self.connect(self.source, self.if_filter, self)

class source_file(gr.hier_block2):
	def __init__(self, file_path, throttle=False):
		super(source_file, self).__init__(
			"source_file",
			gr.io_signature(0, 0, 0),
			gr.io_signature(1, 1, gr.sizeof_gr_complex*1),
		)

		self.source = blocks.file_source(gr.sizeof_gr_complex*1, file_path, False)

		if throttle:
			self.throttle = blocks.throttle(gr.sizeof_gr_complex*1, if_sampling_rate, True)
			self.connect(self.source, self.throttle, self)
		else:
			self.connect(self.source, self)

class ask_channel_filter(gr.hier_block2):
	def __init__(self, decimation, symbol_rate):
		super(ask_channel_filter, self).__init__(
			"ask_channel_filter",
			gr.io_signature(1, 1, gr.sizeof_float*1),
			gr.io_signature(1, 1, gr.sizeof_float*1),
		)

		output_sampling_rate = float(if_sampling_rate) / decimation
		output_nyquist = output_sampling_rate / 2.0

		filter_attenuation_db = 40
		filter_cutoff = symbol_rate * 1.4 * 0.5
		filter_transition = symbol_rate * 1.4 * 0.2
		if (filter_cutoff + filter_transition) > output_nyquist:
			raise RuntimeError('ASK channel filter exceeds Nyquist frequency')

		filter_taps = firdes.low_pass_2(1.0, if_sampling_rate, filter_cutoff, filter_transition, filter_attenuation_db)
		self.filter = filter.fir_filter_fff(decimation, (filter_taps))
		self.connect((self, 0), (self.filter, 0))

		self.envelope = tpms.ask_env(alpha=0.02)
		self.connect((self.filter, 0), (self.envelope, 0))

		self.connect((self.envelope, 0), (self, 0))		

class clock_recovery(gr.hier_block2):
	def __init__(self, input_rate, symbol_rate):
		super(clock_recovery, self).__init__(
			"clock_recovery",
			gr.io_signature(1, 1, gr.sizeof_float*1),
			gr.io_signature(1, 1, gr.sizeof_char*1),
		)

		samples_per_symbol = float(input_rate) / symbol_rate
		omega_relative_limit = 0.02
		gain_mu = 0.4 / samples_per_symbol

		self.clock_recovery = digital.clock_recovery_mm_ff(samples_per_symbol*(1+0.00), 0.25*gain_mu*gain_mu, 0.5, gain_mu, omega_relative_limit)
		self.slicer = digital.binary_slicer_fb()

		self.connect((self, 0), (self.clock_recovery, 0))
		self.connect((self.clock_recovery, 0), (self.slicer, 0))
		self.connect((self.slicer, 0), (self, 0))

ask_clock_recovery = clock_recovery
fsk_clock_recovery = clock_recovery

def queue_handler(queue):
	def queue_handler_fn():
		while True:
			message = queue.delete_head()
			print('message')
	return queue_handler_fn

class demodulate_ask(gr.hier_block2):
	def __init__(self, packet_sink):
		super(demodulate_ask, self).__init__(
			"demodulate_ask",
			gr.io_signature(1, 1, gr.sizeof_gr_complex*1),
			gr.io_signature(0, 0, 0),
		)

		self.complex_to_mag = blocks.complex_to_mag(1)
		self.connect((self, 0), (self.complex_to_mag, 0))

		filter_output = False
		bits_output = False
		cor_output = False

		configuration = (
			(
				4667, 40, (
					(4040, ('110011001100110011001011',)),
					(4667, ('10101010101010101010101010101001',)),
				),
			), (
				8400, 20, (
					(8157, ('111101010101010101010101010101011110',)),
					(8400, ('1010101010101010101010101010110',)),
				),
			), (
				10000, 16, (
					(10000, ('11001111101010101001',)),
				),
			),
		)

		for filter_rate, decimation, symbol_rates in configuration:
			input_rate = float(if_sampling_rate) / decimation

			channel_filter = ask_channel_filter(decimation=decimation, symbol_rate=filter_rate)
			self.connect((self.complex_to_mag, 0), (channel_filter, 0))

			if filter_output:
				input_rate_s = ('%.3f' % (input_rate / 1e3)).replace('.', 'k')
				filename = 'lpf_ask_%s.i16' % (input_rate_s,)
				float_to_short = blocks.float_to_short(1, 32767 * sqrt(2) / 2 / 2)
				self.connect((channel_filter, 0), (float_to_short, 0))
				file_sink_filter = blocks.file_sink(gr.sizeof_short*1, filename, False)
				self.connect((float_to_short, 0), (file_sink_filter, 0))

			for symbol_rate, access_codes in symbol_rates:
				if not isinstance(access_codes, tuple):
					raise RuntimeError('Access code formatting error')

				clock_recovery = ask_clock_recovery(input_rate, symbol_rate)
				self.connect((channel_filter, 0), (clock_recovery, 0))

				if bits_output:
					input_rate_s = ('%.3f' % (input_rate / 1e3)).replace('.', 'k')
					symbol_rate_s = ('%.3f' % (symbol_rate / 1e3)).replace('.', 'k')
					filename = 'bit_ask_%s_%s.i8' % (input_rate_s, symbol_rate_s)
					file_sink_bits = blocks.file_sink(gr.sizeof_char*1, filename, False)
					self.connect((clock_recovery, 0), (file_sink_bits, 0))

				for access_code in access_codes:
					correlator = digital.correlate_access_code_bb(access_code, 0)
					self.connect((clock_recovery, 0), (correlator, 0))

					attributes = pmt.make_dict()
					attributes = pmt.dict_add(attributes, pmt.intern("modulation"), pmt.intern("ask"))
					attributes = pmt.dict_add(attributes, pmt.intern("access_code"), pmt.intern(access_code))
					attributes = pmt.dict_add(attributes, pmt.intern("symbol_rate"), pmt.from_long(int(round(symbol_rate))))

					frame_sink = tpms.fixed_length_frame_sink(256, attributes)
					self.connect((correlator, 0), (frame_sink, 0))

					self.msg_connect(frame_sink, "packet_source", packet_sink, "packet_sink")

					if cor_output:
						input_rate_s = ('%.3f' % (input_rate / 1e3)).replace('.', 'k')
						symbol_rate_s = ('%.3f' % (symbol_rate / 1e3)).replace('.', 'k')
						filename = 'cor_ask_%s_%s_%s.i8' % (input_rate_s, symbol_rate_s, access_code)
						file_sink_correlator = blocks.file_sink(gr.sizeof_char*1, filename, False)
						self.connect((correlator, 0), (file_sink_correlator, 0))

class fsk_center_tracking(gr.hier_block2):
	def __init__(self):
		super(fsk_center_tracking, self).__init__(
			"fsk_center_tracking",
			gr.io_signature(1, 1, gr.sizeof_gr_complex*1),
			gr.io_signature(1, 1, gr.sizeof_gr_complex*1),
		)

		# Arbitrary averaging values that seem to work OK.
		window_symbols = 20
		symbol_rate = 19200
		average_window = int(floor(if_sampling_rate * window_symbols / symbol_rate))

		self.delay = blocks.delay(gr.sizeof_gr_complex*1, average_window)

		self.demod = analog.quadrature_demod_cf(1)
		self.moving_average = blocks.moving_average_ff(average_window, 1.0 / average_window, 4000)
		self.vco = blocks.vco_c(if_sampling_rate, -if_sampling_rate, 1)

		self.multiply = blocks.multiply_vcc(1)

		self.connect((self, 0), (self.delay, 0))
		self.connect((self.delay, 0), (self.multiply, 0))

		self.connect((self, 0), (self.demod, 0))
		self.connect((self.demod, 0), (self.moving_average, 0))
		self.connect((self.moving_average, 0), (self.vco, 0))
		self.connect((self.vco, 0), (self.multiply, 1))

		self.connect((self.multiply, 0), (self, 0))

class fsk_demodulator(gr.hier_block2):
	def __init__(self, deviation, decimation, symbol_rate):
		super(fsk_demodulator, self).__init__(
			"fsk_demodulator",
			gr.io_signature(1, 1, gr.sizeof_gr_complex*1),
			gr.io_signature(1, 1, gr.sizeof_float*1),
		)

		symbol_taps_length = int(floor(float(if_sampling_rate) / symbol_rate))
		symbol_taps = (1,) * symbol_taps_length

		self.symbol_filter_h = filter.freq_xlating_fir_filter_ccf(1, (symbol_taps), deviation, if_sampling_rate)
		self.symbol_filter_l = filter.freq_xlating_fir_filter_ccf(1, (symbol_taps), -deviation, if_sampling_rate)

		self.mag_h = blocks.complex_to_mag(1)
		self.mag_l = blocks.complex_to_mag(1)
		self.sub = blocks.sub_ff(1)

		output_filter_cutoff = symbol_rate * 0.75
		output_filter_transition = symbol_rate * 0.25
		output_filter_attenuation = 40
		output_filter_taps = firdes.low_pass_2(1.0, if_sampling_rate, output_filter_cutoff, output_filter_transition, output_filter_attenuation)
		self.output_filter = filter.fir_filter_fff(decimation, (output_filter_taps))

		self.connect((self, 0), (self.symbol_filter_h, 0))
		self.connect((self, 0), (self.symbol_filter_l, 0))
		self.connect((self.symbol_filter_h, 0), (self.mag_h, 0))
		self.connect((self.symbol_filter_l, 0), (self.mag_l, 0))
		self.connect((self.mag_h, 0), (self.sub, 0))
		self.connect((self.mag_l, 0), (self.sub, 1))
		self.connect((self.sub, 0), (self.output_filter, 0))
		self.connect((self.output_filter, 0), (self, 0))

class demodulate_fsk(gr.hier_block2):
	def __init__(self, packet_sink):
		super(demodulate_fsk, self).__init__(
			"demodulate_fsk",
			gr.io_signature(1, 1, gr.sizeof_gr_complex*1),
			gr.io_signature(0, 0, 0),
		)

		self.center_tracking = fsk_center_tracking()
		self.connect((self, 0), (self.center_tracking, 0))

		configuration = (
			(38400, 10, 19200, (
				(19220, ('01010101010101010101010101010110',)),
			)),
			(35000, 10, 20000, (
				(19440, ('01010101010101010101010101010110',)),
			)),
			(30000, 10, 20000, (
				(19250, ('00110011001100110011001100110011010',)),
				(19950, ('110110101110001',)),
				(20480, ('110110101110001',)),
			)),
			(20000, 10, 20000, (
				(19224, ('1010101010101010101010101010100110',)),
			)),
			(40000, 10, 10000, (
				(9910, ('00111111001',)),
			)),
			(25000, 8, 20000, (
				(20040, ('010101010011110',)),
			)),
		)

		for deviation, decimation, channel_rate, symbol_rates in configuration:
			input_rate = float(if_sampling_rate) / decimation

			demodulator = fsk_demodulator(deviation, decimation, channel_rate)
			self.connect((self.center_tracking, 0), (demodulator, 0))

			for symbol_rate, access_codes in symbol_rates:
				if not isinstance(access_codes, tuple):
					raise RuntimeError('Access code formatting error')

				clock_recovery = fsk_clock_recovery(input_rate, symbol_rate)
				self.connect((demodulator, 0), (clock_recovery, 0))

				for access_code in access_codes:
					correlator = digital.correlate_access_code_bb(access_code, 0)
					self.connect((clock_recovery, 0), (correlator, 0))

					attributes = pmt.make_dict()
					attributes = pmt.dict_add(attributes, pmt.intern("modulation"), pmt.intern("fsk"))
					attributes = pmt.dict_add(attributes, pmt.intern("deviation"), pmt.from_long(int(round(deviation))))
					attributes = pmt.dict_add(attributes, pmt.intern("access_code"), pmt.intern(access_code))
					attributes = pmt.dict_add(attributes, pmt.intern("symbol_rate"), pmt.from_long(int(round(symbol_rate))))

					frame_sink = tpms.fixed_length_frame_sink(256, attributes)
					self.connect((correlator, 0), (frame_sink, 0))

					self.msg_connect(frame_sink, "packet_source", packet_sink, "packet_sink")

class top_block(gr.top_block):
	def __init__(self, source, args):
		super(top_block, self).__init__(
			"top_block"
		)

		if source == 'hackrf':
			self.source = source_hackrf()
		elif source == 'rtlsdr':
			self.source = source_rtlsdr()
		elif source == 'file':
			self.source = source_file(args.file)
		else:
			raise RuntimeError('No source specified')

		if args.bursts:
			self.burst_detector = tpms.burst_detector()

			self.burst_file_sink = blocks.tagged_file_sink(gr.sizeof_gr_complex*1, if_sampling_rate)
			self.connect((self.source, 0), (self.burst_detector, 0))
			self.connect((self.burst_detector, 0), (self.burst_file_sink, 0))

		self.packet_sink = packet_sink(output_raw=args.raw)

		self.demodulate_ask = demodulate_ask(self.packet_sink)
		self.connect((self.source, 0), (self.demodulate_ask, 0))

		self.demodulate_fsk = demodulate_fsk(self.packet_sink)
		self.connect((self.source, 0), (self.demodulate_fsk, 0))

def main():
	parser = ArgumentParser()
	parser.add_argument('-f', '--file', type=str, default=None, help="Input file path for offline processing")
	parser.add_argument('-s', '--source', type=str, default=None, help="Source for live baseband data (hackrf, rtlsdr)")
	parser.add_argument('-b', '--bursts', action="store_true", help="Save bursts of significant energy to separate files")
	parser.add_argument('-r', '--raw', action="store_true", help="Include raw (undecoded) bits in output")
	args = parser.parse_args()

	if args.file:
		source = 'file'
	else:
		source = args.source

	tb = top_block(source, args)
	tb.start()

	try:
		tb.wait()
	except KeyboardInterrupt:
		tb.stop()

if __name__ == '__main__':
	main()
